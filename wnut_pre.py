# -*- coding: utf-8 -*-
"""wnut.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-OmG3W30ykfvC-c7ddCMpjXzEyH5dMg1
"""


# !pip install flair
# !pip install tweet-preprocessor
# !pip install allennlp==0.9.0

from flair.data import Corpus
from flair.datasets import CSVClassificationCorpus
from flair.models import TextClassifier
from flair.trainers import ModelTrainer
from flair.embeddings import StackedEmbeddings, DocumentLSTMEmbeddings
from flair.embeddings import FlairEmbeddings, TransformerWordEmbeddings, ELMoEmbeddings

data_folder = 'data'

# column format indicating which columns hold the text and label(s)
#column_name_map = {0: "id", 1: "text", 2: "label"}

# load corpus containing training, test and dev data and if CSV has a header, you can skip it
#corpus = CSVClassificationCorpus(data_folder, column_name_map, skip_header=True, delimiter='\t')

#elmo_embedding = ELMoEmbeddings('small')
#elmo_embedding = ELMoEmbeddings('custom', options_file = "elmo_files/elmo_2x1024_128_2048cnn_1xhighway_options.json", weight_file= "elmo_files/elmo_2x1024_128_2048cnn_1xhighway_weights.hdf5")

#document_embeddings = DocumentLSTMEmbeddings([elmo_embedding], hidden_size=512)

#classifier = TextClassifier(document_embeddings, label_dictionary=corpus.make_label_dictionary(), multi_label=False)

#trainer = ModelTrainer(classifier, corpus)

#trainer.train('elmo-mid-model/', max_epochs=30, embeddings_storage_mode='cpu')

# Prediction Model
from sklearn.metrics import classification_report
from flair.data import Sentence
import pandas as pd
import os

classifier = TextClassifier.load('elmo-mid-model/best-model.pt')


test_df = pd.read_csv(os.path.join('unlabeled_test_with_noise.tsv'), sep='\t', header=None)
#y_true = test_df[2]

y_pred = []
for sent in test_df[1].to_list():
    sentence = Sentence(sent)
    classifier.predict(sentence)
    y_pred.append(sentence.labels[0].value)

res = pd.DataFrame(y_pred)
#res.index = X_test.index # its important for comparison
# res.columns = ["prediction"]
res.to_csv("predictions_test.txt")
#print(classification_report(y_true, y_pred, digits=4))

